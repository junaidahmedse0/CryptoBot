// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TradeNetPro.Models;

#nullable disable

namespace TradeNetPro.Migrations
{
    [DbContext(typeof(TradingDbContext))]
    [Migration("20220721184912_update-fields")]
    partial class updatefields
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("TradeNetPro.Models.ApiKey", b =>
                {
                    b.Property<int>("Oid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Oid"), 1L, 1);

                    b.Property<int>("CustomerOid")
                        .HasColumnType("int");

                    b.Property<int>("ExchangeOid")
                        .HasColumnType("int");

                    b.Property<int>("Market")
                        .HasColumnType("int");

                    b.Property<string>("PublicKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecretKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Oid");

                    b.HasIndex("CustomerOid");

                    b.HasIndex("ExchangeOid");

                    b.ToTable("ApiKeys");
                });

            modelBuilder.Entity("TradeNetPro.Models.Bot", b =>
                {
                    b.Property<int>("Oid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Oid"), 1L, 1);

                    b.Property<string>("CryptoPair")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CustomerOid")
                        .HasColumnType("int");

                    b.Property<bool>("IsPredefined")
                        .HasColumnType("bit");

                    b.Property<string>("Strategy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Oid");

                    b.HasIndex("CustomerOid");

                    b.ToTable("Bots");
                });

            modelBuilder.Entity("TradeNetPro.Models.BotTransaction", b =>
                {
                    b.Property<int>("Oid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Oid"), 1L, 1);

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("BotOid")
                        .HasColumnType("int");

                    b.Property<int>("KeyPairOid")
                        .HasColumnType("int");

                    b.Property<int>("OrderSide")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TradeSignal")
                        .HasColumnType("int");

                    b.Property<decimal>("TradeSize")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TransactionDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Oid");

                    b.HasIndex("BotOid");

                    b.HasIndex("KeyPairOid");

                    b.ToTable("BotTransactions");
                });

            modelBuilder.Entity("TradeNetPro.Models.Customer", b =>
                {
                    b.Property<int>("Oid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Oid"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Oid");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("TradeNetPro.Models.Exchange", b =>
                {
                    b.Property<int>("Oid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Oid"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Oid");

                    b.ToTable("Exchanges");
                });

            modelBuilder.Entity("TradeNetPro.Models.Payment", b =>
                {
                    b.Property<int>("Oid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Oid"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CustomerOid")
                        .HasColumnType("int");

                    b.Property<string>("PaymentDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Oid");

                    b.HasIndex("CustomerOid");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("TradeNetPro.Models.ApiKey", b =>
                {
                    b.HasOne("TradeNetPro.Models.Customer", "Customer")
                        .WithMany("ApiKeys")
                        .HasForeignKey("CustomerOid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TradeNetPro.Models.Exchange", "Exchange")
                        .WithMany("ApiKeys")
                        .HasForeignKey("ExchangeOid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Exchange");
                });

            modelBuilder.Entity("TradeNetPro.Models.Bot", b =>
                {
                    b.HasOne("TradeNetPro.Models.Customer", "Customer")
                        .WithMany("Bots")
                        .HasForeignKey("CustomerOid");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("TradeNetPro.Models.BotTransaction", b =>
                {
                    b.HasOne("TradeNetPro.Models.Bot", null)
                        .WithMany("BotTransactions")
                        .HasForeignKey("BotOid");

                    b.HasOne("TradeNetPro.Models.ApiKey", "KeyPair")
                        .WithMany("BotTransactions")
                        .HasForeignKey("KeyPairOid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KeyPair");
                });

            modelBuilder.Entity("TradeNetPro.Models.Payment", b =>
                {
                    b.HasOne("TradeNetPro.Models.Customer", "Customer")
                        .WithMany("Payments")
                        .HasForeignKey("CustomerOid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("TradeNetPro.Models.ApiKey", b =>
                {
                    b.Navigation("BotTransactions");
                });

            modelBuilder.Entity("TradeNetPro.Models.Bot", b =>
                {
                    b.Navigation("BotTransactions");
                });

            modelBuilder.Entity("TradeNetPro.Models.Customer", b =>
                {
                    b.Navigation("ApiKeys");

                    b.Navigation("Bots");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("TradeNetPro.Models.Exchange", b =>
                {
                    b.Navigation("ApiKeys");
                });
#pragma warning restore 612, 618
        }
    }
}
